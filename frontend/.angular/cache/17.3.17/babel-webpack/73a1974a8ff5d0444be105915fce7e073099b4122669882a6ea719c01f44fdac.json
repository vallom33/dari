{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { HttpParams } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nlet HouseService = class HouseService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = \"http://localhost:8080/api/houses\";\n  }\n  getAllHouses(page = 0, size = 12) {\n    const params = new HttpParams().set(\"page\", page.toString()).set(\"size\", size.toString());\n    return this.http.get(this.apiUrl, {\n      params\n    });\n  }\n  getHouseById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  getFeaturedHouses() {\n    return this.http.get(`${this.apiUrl}/featured`);\n  }\n  searchHouses(filters) {\n    let params = new HttpParams();\n    if (filters.city) params = params.set(\"city\", filters.city);\n    if (filters.quartier) params = params.set(\"quartier\", filters.quartier);\n    if (filters.minPrice) params = params.set(\"minPrice\", filters.minPrice.toString());\n    if (filters.maxPrice) params = params.set(\"maxPrice\", filters.maxPrice.toString());\n    if (filters.minBedrooms) params = params.set(\"minBedrooms\", filters.minBedrooms.toString());\n    if (filters.minBathrooms) params = params.set(\"minBathrooms\", filters.minBathrooms.toString());\n    if (filters.propertyType) params = params.set(\"propertyType\", filters.propertyType);\n    if (filters.page) params = params.set(\"page\", filters.page.toString());\n    if (filters.size) params = params.set(\"size\", filters.size.toString());\n    if (filters.sortBy) params = params.set(\"sortBy\", filters.sortBy);\n    if (filters.sortDir) params = params.set(\"sortDir\", filters.sortDir);\n    return this.http.get(`${this.apiUrl}/search`, {\n      params\n    });\n  }\n  getHousesByCity(city, page = 0, size = 12) {\n    const params = new HttpParams().set(\"page\", page.toString()).set(\"size\", size.toString());\n    return this.http.get(`${this.apiUrl}/city/${city}`, {\n      params\n    });\n  }\n};\nHouseService = __decorate([Injectable({\n  providedIn: \"root\"\n})], HouseService);\nexport { HouseService };","map":{"version":3,"names":["HttpParams","Injectable","HouseService","constructor","http","apiUrl","getAllHouses","page","size","params","set","toString","get","getHouseById","id","getFeaturedHouses","searchHouses","filters","city","quartier","minPrice","maxPrice","minBedrooms","minBathrooms","propertyType","sortBy","sortDir","getHousesByCity","__decorate","providedIn"],"sources":["C:\\Users\\user\\Desktop\\house\\my-app\\frontend\\src\\app\\services\\house.service.ts"],"sourcesContent":["import { type HttpClient, HttpParams } from \"@angular/common/http\"\nimport { Injectable } from \"@angular/core\"\nimport type { Observable } from \"rxjs\"\nimport type { House, SearchFilters } from \"../models/house.model\"\n\nexport interface PageResponse<T> {\n  content: T[]\n  totalElements: number\n  totalPages: number\n  size: number\n  number: number\n}\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class HouseService {\n  private apiUrl = \"http://localhost:8080/api/houses\"\n\n  constructor(private http: HttpClient) {}\n\n  getAllHouses(page = 0, size = 12): Observable<PageResponse<House>> {\n    const params = new HttpParams().set(\"page\", page.toString()).set(\"size\", size.toString())\n\n    return this.http.get<PageResponse<House>>(this.apiUrl, { params })\n  }\n\n  getHouseById(id: number): Observable<House> {\n    return this.http.get<House>(`${this.apiUrl}/${id}`)\n  }\n\n  getFeaturedHouses(): Observable<House[]> {\n    return this.http.get<House[]>(`${this.apiUrl}/featured`)\n  }\n\n  searchHouses(filters: SearchFilters): Observable<PageResponse<House>> {\n    let params = new HttpParams()\n\n    if (filters.city) params = params.set(\"city\", filters.city)\n    if (filters.quartier) params = params.set(\"quartier\", filters.quartier)\n    if (filters.minPrice) params = params.set(\"minPrice\", filters.minPrice.toString())\n    if (filters.maxPrice) params = params.set(\"maxPrice\", filters.maxPrice.toString())\n    if (filters.minBedrooms) params = params.set(\"minBedrooms\", filters.minBedrooms.toString())\n    if (filters.minBathrooms) params = params.set(\"minBathrooms\", filters.minBathrooms.toString())\n    if (filters.propertyType) params = params.set(\"propertyType\", filters.propertyType)\n    if (filters.page) params = params.set(\"page\", filters.page.toString())\n    if (filters.size) params = params.set(\"size\", filters.size.toString())\n    if (filters.sortBy) params = params.set(\"sortBy\", filters.sortBy)\n    if (filters.sortDir) params = params.set(\"sortDir\", filters.sortDir)\n\n    return this.http.get<PageResponse<House>>(`${this.apiUrl}/search`, { params })\n  }\n\n  getHousesByCity(city: string, page = 0, size = 12): Observable<PageResponse<House>> {\n    const params = new HttpParams().set(\"page\", page.toString()).set(\"size\", size.toString())\n\n    return this.http.get<PageResponse<House>>(`${this.apiUrl}/city/${city}`, { params })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}